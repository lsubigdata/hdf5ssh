CCVERSION=$(shell CC -version 2>&1 | awk '{ print $$4; }')


LD = CC -mips3 -n32 -Wl,-woff,84 -Wl,-woff,85

F77    = f77
CC     = cc
CXX    = CC 
RANLIB = echo > /dev/null

FLIBS    = -lftn
# IRIX special: Use precompiled headers
# Available only of MIPS 7.2.1 compiler, not 7.20
ifdef CXX_PCH_FLAG
CXX_PCH_FLAG=-LANG:pch=ON
endif

CXXFLAGS_7.30 = -LANG:std
CXXFLAGS_VERSION = ${CXXFLAGS_$(CCVERSION)}

CXXFLAGS += ${CXXFLAGS_VERSION} -LANG:exceptions=ON -LANG:ansi-for-init-scope $(CXX_PCH_FLAG) \
	     -no_auto_include -LANG:std

SYSCFLAGS  = -mips3 -n32 -DFORTRAN_UNDERLINE 
F77FLAGS   = -mips3 -n32

CFLAGS_so =-shared -avoid_gp_overflow

#
# Linker commands to specify use of static/shared libraries
#
LINK_WITH_STATIC_LIBS=-Bstatic
LINK_WITH_SHARED_LIBS=-Bdynamic

# SGI C++ specific libraries
CC_LIBS_7.30=-lCio

CC_LIBS=${CC_LIBS_$(CCVERSION)}

# How to generate makefile dependencies
MAKEDEPENDENCIES = Makefile.depend
MAKEDEP =
MAKEDEP_FLAGS=-MDupdate $(MAKEDEPENDENCIES) -MDtarget $@

A=so

# who needs set_version sgi1.1 ??
#LD_SHARED=-shared -no_unresolved -set_version sgi1.1 -rdata_shared  -soname lib$(TARGET).so

LD_SHARED=-shared -no_unresolved -rdata_shared  -soname lib$(TARGET).so

# For some reasons these standard includes are not set automatically
# at hyper.str.charite.de (MIPS 7.1 compiler, 28 JUL 98)
#
# INCLUDES += -I/usr/include -I/usr/include/CC
# ^ this was a bad idea. It causes the standard paths not to be included
# at the very end. We had problems with an old tcl-version installed under
# /usr/include...
#
# This is a workaround since CXXFLAGS are set to
# $(INCLUDES) $(SYSCFLAGS) $(MAKEDEP_FLAGS) $(CFLAGS_so)
# MAKEDEP_FLAGS += -I/usr/include -I/usr/include/CC

