# Generic make rules.
#
# This file contains default values for all make variables which
# are used throughout the configuration system.
# Any architecture-specific makefile may override any of these
# variables or none of them.
#

FTP = $(MAKE_ROOT)/make/Ftp.sh
FTP=wget

# Which compiler to be used. By default use gcc.
CC   = gcc
CXX  = g++
F77  = f77


# Compiler specific libraries
CC_LIBS = 

# How to link an executable
LD   = $(CXX) 

# Program to postprocess executable files
EXE	  = 

# Extensions for executable files
E	  = 

# Extension for object files
O = o

# Link command for libraries
SPECIFY_LIBRARY=-l
L=$(SPECIFY_LIBRARY)

#compiler argument to specify the output file
OUTPUT_OBJECT=-o # with space!
OUTPUT_BINARY=-o # with space!

# Various programs
CP = cp
MV = mv
RM = rm -f
TOUCH = touch
RANLIB = ranlib
AR = ar
BISON = bison
FLEX  = flex

# OpenGL Library
GL_LIBS=-lGL -lGLU

# Math library
M=-lm

# Extension for libraries - set to so for shared libraries.
ifndef A
A=a
endif

ifndef SHAREDLIB_SUFFIX
SHAREDLIB_SUFFIX=so
endif


#
# Special flags for shared libraries
#
CFLAGS_so =-shared -fPIC

#
# If the rpath option should not be used while building shared
# libraries, set RPATH= to none.
#
RPATH=
INCLUDES+=-I$(MAKE_ROOT) -I$(LIB_PATH)

#
# Flags for the C/C++ Compiler
#
CFLAGS   = $(INCLUDE_PARAMETERS)  $(SYSCFLAGS) $(MAKEDEP_FLAGS) $(CFLAGS_${A}) $(SYSDEFINES)
CXXFLAGS = $(INCLUDE_PARAMETERS)  $(SYSCFLAGS) $(MAKEDEP_FLAGS) $(CFLAGS_${A}) $(SYSDEFINES)

LDFLAGS = $(LOCAL_LDFLAGS)
LD_SHARED = 

LD_STATIC  = -Bstatic $(TARGETHDR)
LD_DYNAMIC = -Bdynamic

LIBPATHS = -L$(LIB_PATH)
#LIBPATHS=${LIBPATH_PARAMETERS}

LINK = $(LD) $(LDFLAGS) $(LIBPATHS) $^ $(LIBS) $(CC_LIBS) -o $@
#LINK_SHARED = $(LD) $(LDFLAGS) $(LIBPATHS) $(LD_SHARED) $(CC_LIBS)
LINK_SHARED = $(LD) $(LDFLAGS) $(LIBPATH_PARAMETERS) $(LD_SHARED) $(CC_LIBS)
LINK_STATIC = $(LD) $(LDFLAGS) $(LIBPATHS) $(LD_STATIC) $^ $(CC_LIBS) -o $@

#
# Where to put the make dependencies information
#
#MAKEDEPENDENCIES = Makefile.depend
MAKEDEPENDENCIES = *.d

#
# Make dependencies command, executed after compilation of each file
#
#MAKEDEP = @cat *.d > $(MAKEDEPENDENCIES)
MAKEDEP = 
MAKEDEP_CPP = $(MAKEDEP)

#
# Flags to pass to the C/C++ compiler to generate Makefile dependencies
#
MAKEDEP_FLAGS = -MD
MAKEDEP_FLAGS_CPP = $(MAKEDEP_FLAGS)

